TODO 	CreateChild(), DestroyComponent+DestroyGameObject()
	assert when calling destroy on Transform (use destroy on gameobject)
	create other components
	test Transform optimization
	replace current scenegraph stuff
	Do all events of components of same type simultaneous (write method to divide array of indices in chunks and call the chuncks their methods sequentially on each their own async thread)
	optimize by binding pipeline only at begin of recording all the same components
	if the user wants persistent gameobjects over worlds, that should be possible.
	make uml
	Components can change TypeIndex (Bad for serializing)

	inheritance is good, polymorphism is not always necessary(a lot of calls to virtual functions is undesired)
	maybe work with enums for pipelines, have general methods as well to use in the template method pattern

Priorities:
P0:
TodoList
P1:
[RequireComponent]
Culling
identify independent computations at the highest possible level => candidates for threading, 
static vs dynamic in components
P2:
Base layer for an Event based system
P3:
Editor like interface
Animation System